<$include std_doctype_html_decl$>

<head>
	<$defaultPageTitle="Speedy Archiver"$>
	
	<$if not IdcService$>
		<$DisableTargetedQuickSearchesUI = 1$>
	<$endif$>
	
	<$searchFormType = "standard"$>
	<$include std_html_head_declarations$>
	
	<script language="JavaScript">
	<$if not IdcService$>
		<$include str_trim_function$>
	<$endif$>
	<$include query_form_minisearch_script$>
	
	</script>

	<script type="text/javascript" src="<$HttpWebRoot$>resources/speedy/jquery-1.6.1.min.js"></script>
	<script type="text/javascript" src="<$HttpWebRoot$>resources/speedy/ui/js/jquery-ui-1.8.14.custom.min.js"></script>
	<script type="text/javascript" src="<$HttpWebRoot$>resources/speedy/ajaxupload.3.6.min.js"></script>
	
	<link type="text/css" rel="stylesheet" href="<$HttpWebRoot$>resources/speedy/ui/css/redmond/jquery-ui.css" />
	
	<style type="text/css">
		.hide {
			display: none;
		}
		.loading {
			background: url("<$HttpWebRoot$>resources/speedy/loading.gif") -135px -135px transparent;
			display: none;
			height: 80px;
			margin: auto;
			width: 130px;
		}
		
		#dialog-view-batches {
			position: relative;
		}
		#dialog-view-batches-status {
			
		}
		#dialog-view-batches .container {
			overflow: auto;
		}
		#dialog-view-batches table {
			width: 100%;
		}
		#dialog-view-batches table th {
			text-align: left;
		}
		#dialog-view-batches table td {
			cursor: default;
		}
		#dialog-view-batches table .ui-selected {
			background: url("<$HttpWebRoot$>resources/speedy/ui/css/redmond/images/ui-bg_gloss-wave_55_5c9ccc_500x100.png") 50% 50% repeat-x #5C9CCC;
			color: white;
		}
		#dialog-view-batches table .ui-selected td {
			color: white;
		}
		#dialog-view-batches table .ui-selecting {
			background: #FECA40;
		}
		#dialog-view-batches-status {
			height: 90px;
			width: 100%;
			overflow: auto;
			position: absolute;
			bottom: 0px;
			left: 0;
		}
	</style>
</head>

<$if not IdcService$>
	<body style="width:auto;height:auto;margin:10px;background:#FFFFFF">
	<$include home_page_static_content$>
<$else$>
	<$include body_def$>
	<$include std_page_begin$>
<$endif$>

<$include std_header$>

	<table class="xuiTitleTable" width="100%" cellpadding="0" cellspacing="0" summary="">
		<tr>
			<td class="xuiPageHeadingCell">
				<h1 class="xuiPageHeadingText">Speedy Archiver</h1></td>
			<td class="xuiPageHeadingCell" style="text-align:right" align="right">
				&nbsp;</td>
		</tr>
	</table>

<br style="line-height:25px">

<$IDC_Name=IDC_Name$>
<$executeService("GET_ARCHIVES")$>
<$rsSort("ArchiveData", "aArchiveName", "string", "asc")$>

<$ if ArchiveData $>
	<$include archive_jobs_table $>
<$ else $>
	<div class="xuiDescription">No archive jobs have been defined</div>
<$ endif $>



<!-- GET_ARCHIVES form -->
<form class="hide" action="<$HttpRelativeWebRoot$>idcplg" method="post" id="get-archives-form">
	<input type="hidden" name="IdcService" value="GET_ARCHIVES" />
	<input type="hidden" name="IDC_Name" value="<$ IDC_Name $>" />
	<input type="hidden" name="IsJson" value="1" />
</form>

<script type="text/javascript">
	$(document).ready(function() { 
		
		$('#edit-query-form').submit(function (e) {
			e.preventDefault();
			
			if ($('#edit-query-form-valid').val() == "1") {
			
				// get the correct format for the aExportQuery field
				$('#aExportQuery').val(calculateExportQuery());
				
				var archiveName = $('#edit-archivedata-form input.archive-name').val();
				var statusArea = $('#' + archiveName).closest('tr').find('.status');
				
				var form = $('#edit-archivedata-form');
				
				//console.log(form.serialize());
				
				$.ajax({
					type: 'POST',
					url: form.attr('action'),
					data: form.serialize(),
					success: function(data, textStatus) {
						statusArea.text('Export query for "' + archiveName + '" changed');
					},
					error: function(data) {
						statusArea.html('<span class="xuiError">There was a problem editing the export query</span>');
					},	
					dataType: 'json'
				});
				
			} // if valid
			
		});
		
		$('.actions a.edit-query').click(function(e) {
			
			var archiveName = $(this).closest('div').attr('id');
			
			$('#edit-query-dialog span.archive-name').text(archiveName);
			$('#edit-archivedata-form input.archive-name').val(archiveName);
			$('#edit-query-form').show();
			$('#edit-query-wait').hide();
			
			$('#edit-query-dialog').dialog('open');
			
			// hide the form until the config has been retrieved
			//$('#edit-query-form').hide();
			//$('#edit-query-form textarea, #edit-query-form input').attr('disabled', 'disabled');
			
			$('#CustomQuery').val('Loading export query for ' + archiveName);
			
			
			// GET_ARCHIVES
			$.ajax({
				type: 'POST',
				url: $('#get-archives-form').attr('action'),
				data: $('#get-archives-form').serialize(),
				success: function (data, textStatus) {
					// refresh all archive data
					processArchiveData(data);
					
					// load this export query data into the form
					if (loadExportQuery(archiveName))
					{
						// show the form
						//$('#edit-query-form').show();
						//$('#edit-query-wait').hide();
						//$('#edit-query-form textarea, #edit-query-form input').removeAttr('disabled');
					}
					else
					{
						$('#edit-query-wait').text('Error reading export query for ' + archiveName);
						$('#edit-query-wait').show();
						$('#edit-query-form').hide();
					}
					
				},
				error: function(data) {
					$('#edit-query-wait').text('Unable to get archive data for ' + archiveName);
					$('#edit-query-wait').show();
					$('#edit-query-form').hide();
					
				},
				dataType: 'json'
			});
			
			e.preventDefault();
		});
	
		$('.actions a.import-action').click(function(e) {
			e.preventDefault();
			
			var archiveName = $(this).attr('rel');
			
			$('#form-import-archive').find('input[name=aArchiveName]').val(archiveName);
			
			importArchive();
			
		});
		
		var importArchive = function(archiveName) {
			var form = $('#form-import-archive');
			
			var statusArea = $('#' + archiveName).closest('tr').find('.status');
			
			statusArea.text('Requesting import...');
			
			$.ajax({
				type: 'POST',
				url: form.attr('action'),
				data: form.serialize(),
				success: function(data, textStatus) {
					statusArea.text('Import for archive "' + archiveName + '" started');
				},
				error: function(data) {
					statusArea.html('<span class="xuiError">There was a problem executing the import</span>');
				},
				dataType: 'json'
			});
			
		};
		
		$('.actions a.export-action').click(function(e) {
			var archiveName = $(this).attr('rel');
			
			//populate forms
			$('#form-get-batchfiles').find('input[name=aArchiveName]').val(archiveName);
			$('#form-delete-batch').find('input[name=aArchiveName]').val(archiveName);
			$('#form-export-archive').find('input[name=aArchiveName]').val(archiveName);
			
			$("#dialog-export").dialog('widget').find("button:contains('OK') .ui-button-text").text('Cancel');
			$("#dialog-export").dialog('widget').find("button:contains('Export')").removeAttr('disabled').removeClass('ui-state-disabled').show();
			
			$('#dialog-export').dialog('open');
			e.preventDefault();
		});
		
		$('.actions a.batch-action').click(function(e) {
			var archiveName = $(this).attr('rel');
			
			//populate forms
			$('#form-get-batchfiles').find('input[name=aArchiveName]').val(archiveName);
			$('#form-delete-batch').find('input[name=aArchiveName]').val(archiveName);
			$('#form-import-batch').find('input[name=aArchiveName]').val(archiveName);
			
			$('#dialog-view-batches').dialog('open');
			
			var form = $('#form-get-batchfiles');
			
			$.ajax({
				type: 'POST',
				url: form.attr('action'),
				data: form.serialize(),
				success: function(data, textStatus) {
					$('#dialog-view-batches-list').children().remove();
					
					if (data.ResultSets.BatchFiles.rows != null)
					{
						var BatchFiles = data.ResultSets.BatchFiles.rows;
						
						for (var i = 0; i < BatchFiles.length; i++)
						{
							
							
							var trimmedName = BatchFiles[i][0];
							trimmedName = trimmedName.substring(0, trimmedName.indexOf("/"));
							
							var name = $(document.createElement('td')).text(trimmedName);
							var count = $(document.createElement('td')).text(BatchFiles[i][3]);
							var state = $(document.createElement('td')).text(BatchFiles[i][1]);
							
							$(document.createElement('tr'))
								.data('filepath', BatchFiles[i][0])
								.append(name)
								.append(count)
								.append(state)
								.appendTo('#dialog-view-batches-list');
						}
					}
				},
				dataType: 'json'
			});
			
			e.preventDefault();
		});
		
		/**
		 * Exports the archive. forms are prepopulated.
		 */
		var exportArchive = function() {
			
			var statusArea = $('#dialog-export-status');
			
			var form = $('#form-get-batchfiles');
			
			// disable export button
			$("#dialog-export").dialog('widget').find("button:contains('Export')").attr('disabled', 'disabled').addClass('ui-state-disabled');
			
			// clear old batch files?
			if ($('#delete-old-archives').is(':checked'))
			{
				statusArea.text('Enumerating batch files...');
				
				var BatchFiles;
				
				$.ajax({
					async: false,
					type: 'POST',
					url: form.attr('action'),
					data: form.serialize(),
					success: function(data, textStatus) {
						if (data.ResultSets.BatchFiles.rows != null)
						{
							BatchFiles = data.ResultSets.BatchFiles.rows;
						}
					},
					dataType: 'json'
				});
				
				// remove each batch file if any
				if (BatchFiles != null)
				{
					if (BatchFiles.length > 0)
					{
						var errorCount = 0;
						var successCount = 0;
						
						statusArea.text('Removing old batch files...');
						
						form = $('#form-delete-batch');
						
						for (var i = 0; i < BatchFiles.length; i++)
						{
							form.find('input[name=aBatchFile]').val(BatchFiles[i][0]);
							
							$.ajax({
								async: false,
								type: 'POST',
								url: form.attr('action'),
								data: form.serialize(),
								success: function(data, textStatus) {
									successCount++;
								},
								error: function(data) {
									errorCount++;
								},
								dataType: 'json'
							});
						}
					}
				}
			}
			
			statusArea.text('Exporting...');
			
			form = $('#form-export-archive');
			
			statusArea.text('Requesting export...');
			
			$.ajax({
				type: 'POST',
				url: form.attr('action'),
				data: form.serialize(),
				success: function(data, textStatus) {
					statusArea.text('Export started. You may close the dialog.');
					
					$("#dialog-export").dialog('widget').find("button:contains('Export')").hide();
					$("#dialog-export").dialog('widget').find("button:contains('Cancel') .ui-button-text").text('OK');
				},
				error: function(data) {
					statusArea.html('<span class="xuiError">There was a problem executing the export</span>');
				},
				dataType: 'json'
			});
		};
		
		/**
		 * Turns the visual form into a the archivedata parameter aExportQuery
		 */
		var calculateExportQuery = function() {
			var fieldValue = "Standard Query	ValuePanel 	";
			var tempVal = "";
			
			tempVal = $('#UseExportDate').is(':checked') ? '1' : '0';
			fieldValue += "UseExportDate " + tempVal + "	";
			
			tempVal = $('#AllowExportPublished').is(':checked') ? '1' : '0';
			fieldValue += "AllowExportPublished " + tempVal + "	";
			
			tempVal = $('#AllRevisions').is(':checked') ? '1' : '0';
			fieldValue += "AllRevisions " + tempVal + "	";
			
			tempVal = $('#LatestRevisions').is(':checked') ? '1' : '0';
			fieldValue += "LatestRevisions " + tempVal + "	";
			
			tempVal = $('#NotLatestRevisions').is(':checked') ? '1' : '0';
			fieldValue += "NotLatestRevisions " + tempVal + "	";
			
			tempVal = $('#MostRecentMatching').is(':checked') ? '1' : '0';
			fieldValue += "MostRecentMatching " + tempVal + "	";
			
			// TODO: clauses logic, prob not neccesary
			tempVal = "";
			fieldValue += "CurrentIndex -1	Clauses " + tempVal + "	";
			
			tempVal = escapeExportQuery();
			fieldValue += "CustomQuery " + tempVal + "	";
			
			/*/ custom query always enabled for now
			tempVal = $('#IsCustom').is(':checked') ? '1' : '0';
			fieldValue += "IsCustom " + tempVal;*/
			
			fieldValue += "IsCustom 1";
			
			//console.log(fieldValue);
			
			return fieldValue;
		}
		
		/**
		 * Escapes the export query as is required
		 */
		var escapeExportQuery = function() {
			var QueryText = $('#CustomQuery').val();
			
			//console.log(QueryText);
			
			QueryText = QueryText.replace(/%/g, "#%"); // % = #%
			QueryText = QueryText.replace(/ /g, "%"); // whitespace = %
			
			//console.log(QueryText);
			
			return QueryText;
		}
		
		/**
		 * Unescapes the export query as is required
		 */
		var unescapeExportQuery = function(QueryText) {
			//console.log(QueryText);
			
			// doesnt suport look behind :/ or this would work: (?<!\\)(\\r)?\\n/g
			
			// so this hack will work *sigh*
			QueryText = QueryText.replace(/\\\\/g, "!!");
			
			QueryText = QueryText.replace(/(\\r)?\\n/g, "\n");
			
			QueryText = QueryText.replace(/!!/g, "\\");
			
			QueryText = QueryText.replace(/\\\\/g, "\\");
			QueryText = QueryText.replace(/%/g, " ");
			QueryText = QueryText.replace(/# /g, "%");
			
			//console.log(QueryText);
			
			return QueryText;
		}
		
		/**
		 * Loads all archive data settings into the respective rows.
		 */
		var processArchiveData = function (data) {
			if (data.ResultSets.ArchiveData && data.ResultSets.ArchiveData.rows.length > 0)
			{
				var archives = data.ResultSets.ArchiveData.rows;
			
				for (var i = 0; i < archives.length; i++)
				{
					// put the archive config into the input.config element (hidden)
					$('#' + archives[i][0]).find('input.config').val(archives[i][2]);
				}
			}
		}
		
		// load this export query data into the form
		var loadExportQuery = function(archiveName) {
			var archiveConfig = $('#' + archiveName).find('input.config').val();
			
			var data = {};
			var key = "";
			var value = "";
			
			// parse the export query out of it
			var rx = /aExportQuery=(.*)\n/;
			
			var aExportQuery = rx.exec(archiveConfig);
			
			// is there a first match
			if (aExportQuery != null && aExportQuery[1])
			{
				//console.log(aExportQuery[1]);
				
				var params = aExportQuery[1].split("\t");
				
				//console.log(params);
				
				// parse parameters
				for (var i = 0; i < params.length; i++)
				{
					// is this a valid parameter?
					if (params[i].indexOf(" ") >= 0)
					{
						key = params[i].substring(0, params[i].indexOf(" "));
						value = params[i].substring(params[i].indexOf(" ") + 1);
						data[key] = value;
					}
				}
				
				// store in DOM
				$('#' + archiveName).data('export-query', data);
				
				// load into query dialog
				loadQueryDialog(data);
				
				return true;
			}
			
			// no data found
			return false;
		}
		
		/**
		 * loads an archive job's data into the query editor dialog
		 */
		var loadQueryDialog = function(data) {
			if (data.AllRevisions == '1') {
				$('#AllRevisions').attr('checked', 'checked');
			} else {
				$('#AllRevisions').removeAttr('checked');
			}
			
			if (data.LatestRevisions == '1') {
				$('#LatestRevisions').attr('checked', 'checked');
			} else {
				$('#LatestRevisions').removeAttr('checked');
			}
			
			if (data.NotLatestRevisions == '1') {
				$('#NotLatestRevisions').attr('checked', 'checked');
			} else {
				$('#NotLatestRevisions').removeAttr('checked');
			}
			
			if (data.MostRecentMatching == '1') {
				$('#MostRecentMatching').attr('checked', 'checked');
			} else {
				$('#MostRecentMatching').removeAttr('checked');
			}
			
			/* not used at the moment
			if (data.IsCustom == '1') {
				$('#IsCustom').attr('checked', 'checked');
			} else {
				$('#IsCustom').removeAttr('checked');
			}*/
			
			if (data.UseExportDate == '1') {
				$('#UseExportDate').attr('checked', 'checked');
			} else {
				$('#UseExportDate').removeAttr('checked');
			}
			
			if (data.AllowExportPublished == '1') {
				$('#AllowExportPublished').attr('checked', 'checked');
			} else {
				$('#AllowExportPublished').removeAttr('checked');
			}
			
			
			$('#CustomQuery').val(unescapeExportQuery(data.CustomQuery));
			
			$('#edit-query-form-valid').val('1'); // form is now valid
		}
		
		
		//upload ajax dialog
		$(".actions a.upload-action").each(function (index, elem) {
			var archiveName = $(elem).closest('div').attr('id');
			
			
			
			var uploader = new AjaxUpload($(this), {
				action : '<$HttpRelativeWebRoot$>idcplg',
				name: 'primaryFile',
				data : {
					IdcService: 'SPEEDY_ARCHIVER_UPLOAD',
					IsSoap: 1,
					archiveName: archiveName,
					file: 'zipArchive'
				},
				onSubmit : function(file, ext) {
					$('#form-import-archive').find('input[name=aArchiveName]').val(archiveName);
				},
				onChange : function(file, ext) {
					$('#dialog-upload-info .message').text('Please wait while your file uploads');
					$('#dialog-upload-info .loading').show();
					
					// disable buttons
					$("#dialog-upload-info").dialog('widget').find("button").attr('disabled', 'disabled').addClass('ui-state-disabled');
					$('#dialog-upload-info').dialog('open');
					
					if(ext != "zip")
   					{
   						$('#dialog-upload-info .message').text('You can upload only Zip files (make sure they are downloaded using SpeedyArchiver)!');
   						$('#dialog-upload-info .loading').hide();
   						return false;
   					}
  				},
				onComplete: function(file, response) {
					$('#dialog-upload-info .loading').hide();
					if ($(response).find('idc\\:field[name=uploadedArchive]').text() == 'true') {
						$('#dialog-upload-info .message').text('Upload complete!');
					}
					else
					{
						$('#dialog-upload-info .message').text('Error during upload!');
					}
					
					// enable all buttons
					$("#dialog-upload-info").dialog('widget').find("button").removeAttr("disabled").removeClass('ui-state-disabled');
					$("#dialog-upload-info").dialog('widget').find("button:contains(OK) .ui-button-text").text('Close');
				}
			});
			
			//initializing dialogs
			$("#dialog-upload-info").dialog({
	   			resizable: false,
	   			height: 200,
	   			width: 480,
	  			modal: true,
	   			autoOpen: false,
	   			show: 'fade',
	   			hide: 'fade',
	   			closeOnEscape: false,
	   			open: function() {
	   				$("#dialog-upload-info").dialog('widget').find("button:contains(Close) .ui-button-text").text('OK');
	   			},
	   			buttons: {
	   				"Import": function () {
						importArchive();
						$(this).dialog('close');
					},
					"OK": function () {
						$(this).dialog('close');
					}
	   			}
	  		});
			
			$('#edit-query-dialog').dialog({ 
				modal: true,
				width: 685,
				autoOpen: false,
				show: 'fade',
				hide: 'fade',
				buttons: {
					"OK": function () {
						$('#edit-query-form').submit();
						$('#edit-query-form-valid').val('0'); // reset valid flag
						$(this).dialog('close');
					},
					"Cancel": function () {
						$('#edit-query-form-valid').val('0'); // reset valid flag
						$(this).dialog('close');
					}
				}
			});
			
			$('#dialog-export').dialog({ 
				modal: true,
				width: 480,
				autoOpen: false,
				show: 'fade',
				hide: 'fade',
				buttons: {
					"Export": function () {
						exportArchive();
						//$(this).dialog('close');
					},
					"Cancel": function () {
						$(this).dialog('close');
					}
				}
			});
			
			$('#dialog-view-batches').dialog({ 
				modal: true,
				width: 400,
				height: 400,
				autoOpen: false,
				show: 'fade',
				hide: 'fade',
				buttons: {
					"Import": function () {
						var batches = $('#dialog-view-batches-selected').data('selected');
						
						var form = $('#form-import-batch');
						
						for (var i = 0; i < batches.length; i++)
						{
							form.find('input[name=aBatchFile]').val(batches[i]);
							
							$.ajax({
								async: false,
								type: 'POST',
								url: form.attr('action'),
								data: form.serialize(),
								success: function(data, textStatus) {
									if (data.LocalData.StatusCode && data.LocalData.StatusCode != '')
									{
										$('#dialog-view-batches-status').append('<br />error importing batch: ' + batches[i]);
										$('#dialog-view-batches-status').append(data.LocalData.StatusMessage);
									}
									else
									{
										$('#dialog-view-batches-status').append('<br />imported batch: ' + batches[i]);
									}
									$('#dialog-view-batches-status').scrollTop($('#dialog-view-batches-status')[0].scrollHeight);
								},
								error: function(data) {
									alert('error');
								},
								dataType: 'json'
							});
						}
					},
					"Delete": function () {
						var batches = $('#dialog-view-batches-selected').data('selected');
						
						var form = $('#form-delete-batch');
						
						for (var i = 0; i < batches.length; i++)
						{
							form.find('input[name=aBatchFile]').val(batches[i]);
							
							$.ajax({
								async: false,
								type: 'POST',
								url: form.attr('action'),
								data: form.serialize(),
								success: function(data, textStatus) {
									$('#dialog-view-batches-list tr').each(function(i, ele) {
										if ($(ele).data('filepath') == data.LocalData.aBatchFile) {
											$(ele).remove();
											$('#dialog-view-batches-status').append('<br />deleted batch: ' + batches[i]);
											$('#dialog-view-batches-status').scrollTop($('#dialog-view-batches-status')[0].scrollHeight);
										}
									});
								},
								error: function(data) {
									alert('error');
								},
								dataType: 'json'
							});
						}
					}
				}
			});
			
			$('#dialog-view-batches-list').selectable({
				filter: "tr",
				stop: function() {
					var result = [];
					$( ".ui-selected", this ).each(function() {
						result.push($(this).data('filepath'));
					});
					
					$('#dialog-view-batches-selected').data('selected', result);
				}
			});
			
			$('#dialog-view-batches-list td').click(function() {
				$(this).closest('tr').toggleClass('ui-selected');
			});
			
		});
		
	}); // document.ready()
</script>
	
	<!-- upload dialog -->
	<div id="dialog-upload-info" class="hide dialog" title="Uploading">
		<div class="message"></div>
	 	<div class="loading"></div>
	</div>
	
	<!-- Export query dialog -->
	<div id="dialog-export" class="hide dialog" title="Export">
		<input id="delete-old-archives" type="checkbox" value="yes" /><label for="delete-old-archives">Clear all batch files before exporting</label><br />
		<input id="delete-content" type="checkbox" value="yes" /><label for="delete-content">Delete exported content</label>
		<div id="dialog-export-status" class="status"></div>
	</div>
	
	<!-- View batchfiles dialog -->
	<div id="dialog-view-batches" class="hide dialog" title="Batch files">
		<input type="hidden" id="dialog-view-batches-selected" />
		<div class="container">
			<table>
				<thead>
					<tr>
						<th>Name</th>
						<th>Items</th>
						<th>State</th>
					</tr>
				</thead>
				
				<tbody id="dialog-view-batches-list">
					<tr>
						<td>&nbsp;</td>
						<td>&nbsp;</td>
						<td>&nbsp;</td>
					</tr>
				</tbody>
			</table>
		</div>
		<div id="dialog-view-batches-status" class="status"></div>
	</div>
	
	<!-- Edit query dialog -->
	<div id="edit-query-dialog" class="hide dialog" title="Edit Query Options">
		<form id="edit-query-form">
			<input type="hidden" id="edit-query-form-valid" value="0" />
			<div class="group">
				<div>
					<!-- div>
						<input type="checkbox" id="IsCustom" name="IsCustom" />
						<label for="IsCustom">Custom Query Expression</label>
					</div -->
					<textarea id="CustomQuery" rows="5" cols="75">dSecurityGroup = 'Public' AND dDocName LIKE 'D%'</textarea>
				</div>
				
				<div>
					<h2>Query Options</h2>
					<div>
						<input type="checkbox" id="UseExportDate" name="UseExportDate" value="1" checked="checked" />
						<label for="UseExportDate">Export Revisions with Release Date later than most recent Export Date</label>
					</div>
					<div>
						<input type="checkbox" id="AllowExportPublished" name="AllowExportPublished" value="1" />
						<label for="AllowExportPublished">Allow export of Published Revisions</label>
					</div>
					<input type="radio" id="AllRevisions" name="RevisionType" value="AllRevisions" />
					<label for="AllRevisions">All Selected Revisions</label>
					
					<input type="radio" id="LatestRevisions" name="RevisionType" value="LatestRevisions" checked="checked" />
					<label for="LatestRevisions">Latest Revisions</label>
					
					<input type="radio" id="NotLatestRevisions" name="RevisionType" value="NotLatestRevisions" />
					<label for="NotLatestRevisions">Not Latest Revisions</label>
					
					<input type="radio" id="MostRecentMatching" name="RevisionType" value="MostRecentMatching" />
					<label for="MostRecentMatching">Single Revision Replication</label>
				</div>
			</div>
		</form>
		<div id="edit-query-wait">
			Loading query details for <span class="archive-name">Archive name</span>, please wait...
		</div>
		
		<!-- EDIT_ARCHIVEDATA form -->
		<form class="hide" action="<$HttpRelativeWebRoot$>idcplg" method="post" id="edit-archivedata-form">
			<input type="hidden" name="IdcService" value="EDIT_ARCHIVEDATA" />
			<input type="hidden" name="IDC_Name" value="<$ IDC_Name $>" />
			<input type="hidden" name="EditItems" value="aExportQuery" />
			<input type="hidden" class="archive-name" name="aArchiveName" value="" />
			<input type="hidden" name="IsJson" value="1" />
			
			<input type="hidden" id="aExportQuery" name="aExportQuery" />
		</form>
	</div>
	
	<!-- EXPORT_ARCHIVE -->
	<form id="form-export-archive" class="hide export" method="post" action="<$HttpRelativeWebRoot$>idcplg">
		<input type="hidden" name="IdcService" value="EXPORT_ARCHIVE" />
		<input type="hidden" name="IDC_Name" value="<$ IDC_Name $>" />
		<input type="hidden" name="RedirectUrl" value="" />
		<input type="hidden" name="IsJson" value="1" />
		
		<input type="hidden" name="dataSource" value="RevisionIDs" />
		<input type="hidden" name="aArchiveName" value="" />
		<input type="hidden" name="aDoDelete" value="0" />
	</form>
	
	<!-- GET_BATCHFILES FORM -->
	<form id="form-get-batchfiles" class="hide export" method="post" action="<$HttpRelativeWebRoot$>idcplg">
		<input type="hidden" name="IdcService" value="GET_BATCHFILES" />
		<input type="hidden" name="IDC_Name" value="<$ IDC_Name $>" />
		<input type="hidden" name="RedirectUrl" value="" />
		<input type="hidden" name="IsJson" value="1" />
		
		<input type="hidden" name="aArchiveName" value="" />
	</form>
	
	<!-- DELETE_BATCH_FILE FORM -->
	<form id="form-delete-batch" class="hide export" method="post" action="<$HttpRelativeWebRoot$>idcplg">
		<input type="hidden" name="IdcService" value="DELETE_BATCH_FILE" />
		<input type="hidden" name="IDC_Name" value="<$ IDC_Name $>" />
		<input type="hidden" name="RedirectUrl" value="" />
		<input type="hidden" name="IsJson" value="1" />
		
		<input type="hidden" name="aArchiveName" value="" />
		<input type="hidden" name="aBatchFile" value="" />
	</form>
	
	<!-- IMPORT_BATCH_FILE FORM -->
	<form id="form-import-batch" class="hide export" method="post" action="<$HttpRelativeWebRoot$>idcplg">
		<input type="hidden" name="IdcService" value="IMPORT_BATCHFILE" />
		<input type="hidden" name="IDC_Name" value="<$ IDC_Name $>" />
		<input type="hidden" name="RedirectUrl" value="" />
		<input type="hidden" name="IsJson" value="1" />
		
		<input type="hidden" name="aArchiveName" value="" />
		<input type="hidden" name="aBatchFile" value="" />
	</form>
	
	<!-- IMPORT_ARCHIVE FORM -->
	<form id="form-import-archive" class="hide import" method="post" action="<$ HttpRelativeWebRoot $>idcplg">
		<input type="hidden" name="IdcService" value="IMPORT_ARCHIVE" />
		<input type="hidden" name="IDC_Name" value="<$ IDC_Name $>" />
		<input type="hidden" name="RedirectUrl" value="" />
		<input type="hidden" name="IsJson" value="1" />
		
		<input type="hidden" name="aArchiveName" value="" />
		<input type="hidden" name="aImportDocuments" value="true" />
		<input type="hidden" name="aImportDocConfig" value="false" />
	</form>


	<$include std_page_end$>
</body>
</html>
